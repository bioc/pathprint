\documentclass{article}
\usepackage{Sweave}
\usepackage{amsmath}
\usepackage{amscd}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}
\usepackage[usenames]{color}
\definecolor{midnightblue}{rgb}{0.098,0.098,0.439}
\DefineVerbatimEnvironment{Sinput}{Verbatim}{xleftmargin=2em, fontshape=sl,formatcom=\color{midnightblue}}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=2em}
\DefineVerbatimEnvironment{Scode}{Verbatim}{xleftmargin=2em}
\fvset{listparameters={\setlength{\topsep}{0pt}}}
\renewenvironment{Schunk}{\vspace{\topsep}}{\vspace{\topsep}}
\SweaveOpts{keep.source=TRUE, pdf.version=1.4, eps = FALSE, concordance=TRUE, height=5, width=10, prefix.string=figs/}
\setkeys{Gin}{width=\textwidth}
\begin{document}
\title{Building the R package GMAfunctions}
\author{Gabriel Altschuler}
\maketitle
<<echo=FALSE>>=
options(width=60)
options(continue=" ")
@
This document outlines the steps required to build or update the R package GMAfunctions.
\section{Loading the data}
The first step is to load all the relevant files into the workspace. This includes the scripts to process a gene expression array to a pathway fingerprint, dataframes containing the annotation files, metadata and fingerprint database, and the pathway sets that define the fingerprint.
<<data>>=
dir<-"../"
source("../scripts/gabriel functions.R")
@
\section{Compile source package}
The \verb@utils@ script \verb@package.skeleton@ compiles all workspace objects into a new package. The argument \verb@force = TRUE@ specifies that the previous package directory is overwritten if it exists.
<<compilePackage>>=
packageName<-"GMAfunctions"
package.skeleton(list = ls()[-grep("^dir$", ls())],
                 name = packageName, force = TRUE,
                 path = paste(dir, "package", sep = "")
                 )
@
\section{Build package}
Each object in an R package is described by a man file, this contains information on the type of object and any additional text that will appear in the help page. The next step is to edit these man files, this will be done in full for the final distribution. For this version, some editing is still required to remove a line in the description file without which the package will not compile. A quick fix using a shell script to strip out the problematic lines is sufficient.
<<build>>=
# Edit man files
wd<-getwd()
setwd(paste(dir, "package/", packageName, "/man", sep = ""))
man<-dir()
man<-man[-grep("package.Rd", man)]
for (i in 1:length(man)){
  code<-paste("sh ", "../../../scripts/mansimple.sh " , man[i], sep = "")
  system(code)
}

# Add description, namespace and datalist files from master directory
system(paste("cp ../../", packageName,
             "_masterFiles/DESCRIPTION ../DESCRIPTION", sep = ""))
system(paste("cp ../../", packageName,
             "_masterFiles/NAMESPACE ../NAMESPACE", sep = ""))
system(paste("cp ../../", packageName,
             "_masterFiles/datalist ../data/datalist", sep = ""))
system(paste("cp ../../", packageName,
              "_masterFiles/manFiles/GMAfunctions-package.Rd",
              " ", "GMAfunctions-package.Rd", sep = ""))
# Build package
setwd(wd)
setwd("../package")
system(paste("rm ",packageName, "/Read-and-delete-me", sep = ""))
# Add in the a manual compiled by collating all the Rd files
system(paste("mkdir ", packageName, "/inst", sep = ""))
system(paste("mkdir ", packageName, "/inst/doc", sep = ""))

# Include index html file that references the manual (and any other docs)
system(paste("cp ", packageName, "_masterFiles/index.html ",
             packageName, "/inst/doc/index.html", sep = ""))

system(paste("cp ",packageName, "_masterFiles/nodePathways.pdf ", packageName,
             "/inst/doc/nodePathways.pdf", sep = ""))

# If required the package can be tested
# system(paste("R CMD check ", packageName, sep = ""))
system(paste("R CMD build ", packageName, sep = ""))
setwd(wd)
@
This package can now be installed from the command line, for example when installing on \verb@hpc111@ to a local library
<<Installlocal, eval = FALSE>>=
# install.packages(
# "/home/galtschu2/fingerprint/package/pathprint.tar.gz",
# lib = .libPaths()[3], repos = NULL, type = "source")
@
\end{document}